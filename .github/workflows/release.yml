name: Build and Release

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'GitLab Tag'
        required: true
        default: ''

jobs:
  build-mac:
    name: Build macOS App
    runs-on: macos-latest

    steps:
      - name: Checkout GitHub repository
        uses: actions/checkout@v3

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: 3.11
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 16.7.0
          
      # - name: Install nvm and Node.js
      #   run: |
      #     export NVM_DIR="$HOME/.nvm"
      #     mkdir -p $NVM_DIR
      #     curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash
      #     source $NVM_DIR/nvm.sh
      #     nvm install 16.7.0
      #     nvm use 16.7.0
      #     node -v
      #     npm -v
          
      - name: Clone & Install Dependencies
        run: |
          git clone https://oauth2:${{ secrets.GITLAB_ACCESS_TOKEN }}@gitlab.com/yoongnan/dynamike-tools.git
          cd dynamike-tools
          npm cache clean --force
          npm ci --legacy-peer-deps
          
          
      - name: Build & Cleaning
        run: |
          cd dynamike-tools
          npm run build-prod
          npm run builder-mac -- --publish=never

          # Move output before cleanup
          mkdir -p ../release-mac
          mv release-output/*.dmg release-output/*.yml ../release-mac/

          # Clean up source code
          cd ..
          rm -rf dynamike-tools
          
      # - name: Upload macOS Artifacts
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: mac-release
      #     path: release-mac/*
          
  build-win:
    name: Build Windows App
    runs-on: ubuntu-latest
    container:
      image: electronuserland/builder:wine  # Wine + Electron Builder for Windows build
      options: --env HOME=/home/user
    steps:
      - name: Checkout GitHub repository
        uses: actions/checkout@v3
        
      - name: Set up Python and build tools
        run: |
          apt-get update
          apt-get install -y python3 python3-pip python3-dev build-essential curl git

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 16.7.0
          
      # - name: Install nvm and Node.js
      #   run: |
      #     export NVM_DIR="$HOME/.nvm"
      #     mkdir -p $NVM_DIR
      #     curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash
      #     . $NVM_DIR/nvm.sh 
      #     nvm install 16.7.0
      #     nvm use 16.7.0
      #     node -v
      #     npm -v
      #     git clone https://oauth2:${{ secrets.GITLAB_ACCESS_TOKEN }}@gitlab.com/yoongnan/dynamike-tools.git
      #     export NVM_DIR="$HOME/.nvm"
      #     . "$NVM_DIR/nvm.sh"
        
      #     # Point WINE to a directory the runner user owns
      #     export WINEPREFIX="$HOME/.wine"
      #     cd dynamike-tools
      #     npm cache clean --force
      #     npm ci --legacy-peer-deps
      #     npm run build-prod
      #     npm run builder-win --publish=never

      #     # Move output before cleanup
      #     mkdir -p ../release-win
      #     mv release-output/*.exe release-output/*.yml ../release-win/

      #     # Clean up source code
      #     cd ..
      #     rm -rf dynamike-tools

          
      - name: Clone & Install Dependencies
        run: |
          git clone https://oauth2:${{ secrets.GITLAB_ACCESS_TOKEN }}@gitlab.com/yoongnan/dynamike-tools.git
          cd dynamike-tools
          npm cache clean --force
          npm ci --legacy-peer-deps
          
      - name: Build & Cleaning
        run: |
          export HOME=/tmp
          cd dynamike-tools
          npm run build-prod
          npm run builder-win --publish=never

          # Move output before cleanup
          mkdir -p ../release-win
          mv release-output/*.exe release-output/*.yml ../release-win/

          # Clean up source code
          cd ..
          rm -rf dynamike-tools
          
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-mac, build-win]
    steps:
      - name: Download macOS artifacts
        uses: actions/download-artifact@v4
        with:
          name: mac-release
          path: mac-release

      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: win-release
          path: win-release
          
      - name: Upload Windows Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: win-release
          path: release-win/*
          
      # - name: Create GitHub Release
      #   uses: softprops/action-gh-release@v1
      #   with:
      #     tag_name: ${{ inputs.tag_name }}
      #     name: Release ${{ inputs.tag_name }}
      #     files: |
      #       release-output/*.dmg
      #       release-output/*.yml
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}


      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ inputs.tag_name }}
          name: Release ${{ inputs.tag_name }}
          files: |
            mac-release/*.dmg
            mac-release/*.yml
            win-release/*.exe
            win-release/*.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
